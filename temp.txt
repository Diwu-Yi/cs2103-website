**`W2.1` Can use Git to save history**️
- [ ] `W2.1a` Can explain revision control ️


------------


------------




------------




------------

**`W6.1` Can implement polymorphism** ⭐️
- [ ] `W6.1a` Can explain method overriding ⭐️
- [ ] `W6.1b` Can implement overriding ⭐️
- [ ] `W6.1c` Can explain OOP polymorphism ⭐️
- [ ] `W6.1d` Can implement polymorphism ⭐️
- [ ] `W6.1e` Can explain abstract classes ⭐️⭐️
- [ ] `W6.1f` Can implement abstract classes ⭐️⭐️
- [ ] `W6.1g` Can explain interfaces ⭐️⭐️⭐️
- [ ] `W6.1h` Can implement interfaces ⭐️⭐️⭐️


- [ ] **`W6.2` Can use JavaFX to build a simple GUI** ⭐️⭐️⭐️


**`W6.3` Can interpret basic sequence diagrams** ⭐️
- [ ] `W6.3a` Can explain/identify sequence diagrams ⭐️
- [ ] `W6.3b` Can interpret sequence diagrams with basic notation ⭐️
- [ ] `W6.3c` Can interpret sequence diagrams with loops ⭐️
- [ ] `W6.3d` Can interpret sequence diagrams with object creation ⭐️
- [ ] `W6.3e` Can interpret sequence diagrams with minimal notation ⭐️
- [ ] `W6.3f` Can draw basic sequence diagrams ⭐️⭐️


**`W6.4` Can explain requirements** ⭐️⭐️
- [ ] `W6.4a` Can explain requirements ⭐️⭐️
- [ ] `W6.4b` Can explain non-functional requirements ⭐️⭐️⭐️
- [ ] `W6.4c` Can explain prioritizing requirements ⭐️⭐️⭐️
- [ ] `W6.4d` Can explain quality of requirements LO ⭐️⭐️⭐️


**`W6.5` Can explain some techniques for gathering requirements** ⭐️⭐️⭐️
- [ ] `W6.5a` Can explain brainstorming ⭐️⭐️⭐️
- [ ] `W6.5b` Can explain product surveys ⭐️⭐️⭐️
- [ ] `W6.5c` Can explain observation ⭐️⭐️⭐️
- [ ] `W6.5d` Can explain user surveys ⭐️⭐️⭐️
- [ ] `W6.5e` Can explain interviews ⭐️⭐️⭐️
- [ ] `W6.5f` Can explain focus groups ⭐️⭐️⭐️
- [ ] `W6.5g` Can explain prototyping ⭐️⭐️⭐️


**`W6.6` Can use some techniques for specifying requirements** ⭐️
- [ ] `W6.6i` Can optimize the use of use cases ⭐️⭐️⭐️⭐️